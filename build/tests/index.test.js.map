{"version":3,"sources":["../../src/tests/index.test.js"],"names":["chai","require","chaiHttp","config","should","token","mongoose","process","env","NODE_ENV","Article","Query","User","server","use","describe","beforeEach","done","deleteMany","err","afterEach","it","request","post","send","end","res","have","status","body","property","get","set","be","a","length","eql","query"],"mappings":"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","sourcesContent":["\r\nconst chai = require(\"chai\");\r\nconst chaiHttp = require(\"chai-http\")\r\nconst config = require(\"config\")\r\nlet should = chai.should();\r\n\r\n//to be used to test private routes\r\nlet token;\r\n\r\nconst mongoose = require(\"mongoose\");\r\n\r\n//During the test the env variable is set to test\r\nprocess.env.NODE_ENV = 'test';\r\n\r\nconst { Article } = require(\"../models/Article\");\r\nconst { Query } = require(\"../models/Query\");\r\nconst { User } = require(\"../models/User\");\r\n\r\n//Require the dev-dependencies\r\nlet server = require('../index');\r\n\r\n\r\nchai.use(chaiHttp);\r\n\r\n//Our parent block\r\ndescribe('API', () => {\r\n\r\n    beforeEach((done) => { //Before each test we empty the database\r\n        User.deleteMany({},(err)=>{\r\n            //  console.log(config.get(\"DBHOST\"))\r\n            done();\r\n        });\r\n    });\r\n\r\n    afterEach((done)=>{\r\n       // console.log(token);\r\n        done();\r\n    })\r\n \r\n    describe(\"Login And Register\",()=>{\r\n\r\n        it('should Register user, login user, generate a token upon login', function(done) {\r\n            chai.request(server)\r\n\r\n                // register request\r\n                .post('/signup')\r\n                // send user registration details\r\n                .send({\r\n                        'username': 'Ronaldo Chris',\r\n                        'password': 'Testertester',\r\n                    }\r\n                ) \r\n                .end((err, res) => { // when we get a resonse from the endpoint\r\n\r\n                    // the res object should have a status of 201\r\n                    res.should.have.status(201);\r\n\r\n                    // follow up with login\r\n                    chai.request(server)\r\n                        .post('/login')\r\n                        // send user login details\r\n                        .send({\r\n                            'username': 'Ronaldo Chris',\r\n                            'password': 'Testertester'\r\n                        })\r\n                        .end((err, res) => {\r\n                             res.should.have.status(200);\r\n                             res.body.should.have.property('token');\r\n                             token = res.body.token;\r\n                            done();\r\n                        })\r\n                })\r\n        })\r\n   })\r\n\r\n   describe(\"Article\",()=>{\r\n\r\n        describe(\"/GET articles\",()=>{\r\n            it(' should get all articles ', (done) => {\r\n\r\n                chai.request(server)\r\n                    .get('/article')\r\n                    .set('Authorization', 'JWT ' + token) //token is actual token data\r\n                    .end(function(err, res) {\r\n                        res.should.have.status(200);\r\n                        res.body.should.be.a('array');\r\n                        res.body.length.should.be.eql(0);\r\n                        done();\r\n                    });\r\n            })\r\n        })\r\n\r\n        describe(\"/POST articles\",() =>{\r\n            it(' should POST an article ', (done) => {\r\n                let query ={\r\n                    \"heading\": \"I have separated my interesting bussiness logic in pure javascript code but I can't find a way to test the routes that require a token in the headers of the http request.\",\r\n                    \"content\":\"I have separated my interesting bussiness logic in pure javascript code but I can't find a way to test the routes that require a token in the headers of the http request.\",\r\n                    \"image\":\"This is a message from a good friend of yours\" \r\n                }\r\n        \r\n              chai.request(server)\r\n                  .post('/article')\r\n                  .send(query)\r\n                  .end((err, res) => {\r\n                        res.should.have.status(201);\r\n                        res.body.should.be.a('object');\r\n                        res.body.should.have.property('Message').eql('New Article Created');\r\n                    done();\r\n                  });\r\n            });\r\n         })\r\n   })\r\n\r\n   describe(\"Query\",()=>{\r\n    describe(\"/GET queries\",()=>{\r\n        it(' should get queries ', (done) => {\r\n\r\n            chai.request(server)\r\n                .get('/queries')\r\n                .set('Authorization', 'JWT ' + token) //token is actual token data\r\n                .end(function(err, res) {\r\n                    res.should.have.status(200);\r\n                    res.body.should.be.a('array');\r\n                    res.body[0].should.have.property('name');\r\n                    res.body[0].should.have.property('email');\r\n                    res.body[0].should.have.property('subject');\r\n                    res.body[0].should.have.property('message');\r\n                    done();\r\n                });\r\n        })\r\n    })\r\n\r\n    describe(\"/POST queries\",() =>{\r\n        it(' should POST a query ', (done) => {\r\n            let query ={\r\n                \"username\": \"Cook Indomie\",\r\n                \"email\": \"cook@gmail.com\",\r\n                \"subject\":\"This is a subject\",\r\n                \"message\":\"This is a message from a good friend of yours\"\r\n                \r\n            }\r\n    \r\n          chai.request(server)\r\n              .post('/queries')\r\n              .send(query)\r\n              .end((err, res) => {\r\n                    res.should.have.status(201);\r\n                    res.body.should.be.a('object');\r\n                    res.body.should.have.property('Message').eql('New Query submitted successfully');\r\n                done();\r\n              });\r\n        });\r\n     })\r\n   })\r\n   describe(\"Likes\",()=>{\r\n        describe('/GET Like', () => {\r\n            it(' should GET all the likes', (done) => {\r\n            chai.request(server)\r\n                .get('/like')\r\n                .end((err, res) => {\r\n                        res.should.have.status(200);\r\n                        res.body.should.be.a('array');\r\n                        res.body.length.should.be.eql(0);\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n  \r\n  })\r\n  describe(\"Comment\",()=>{\r\n  describe('/GET comment', () => {\r\n      it(' should GET all the comments', (done) => {\r\n        chai.request(server)\r\n            .get('/comment')\r\n            .end((err, res) => {\r\n                  res.should.have.status(200);\r\n                  res.body.should.be.a('array');\r\n                  res.body.length.should.be.eql(0);\r\n              done();\r\n            });\r\n      });\r\n  });\r\n\r\n  })\r\n\r\n\r\n\r\n//Test the /POST route\r\n \r\n\r\n\r\n});\r\n\r\n// describe(\"The first test\",() =>{\r\n//   it(\"Should Pass\",() =>{\r\n//       expect(true).to.equal(false);\r\n//   })\r\n\r\n// })"],"file":"index.test.js"}