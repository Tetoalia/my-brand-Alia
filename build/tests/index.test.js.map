{"version":3,"sources":["../../src/tests/index.test.js"],"names":["chai","require","chaiHttp","config","should","token","articleId","mongoose","process","env","NODE_ENV","Article","Query","User","server","use","describe","heading","before","deleteMany","username","beforeEach","done","email","err","afterEach","it","request","post","send","end","res","have","status","body","property","query","set","be","a","eql","get","length","not","likeId","like","commentId","comment"],"mappings":"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","sourcesContent":["\nconst chai = require(\"chai\");\nconst chaiHttp = require(\"chai-http\")\nconst config = require(\"config\")\nlet should = chai.should();\n\n//to be used to test private routes\nlet token,articleId;\n\nconst mongoose = require(\"mongoose\");\n\n//During the test the env variable is set to test\nprocess.env.NODE_ENV = 'test';\n\nconst { Article } = require(\"../models/Article\");\nconst { Query } = require(\"../models/Query\");\nconst { User } = require(\"../models/User\");\n\n//Require the dev-dependencies\nlet server = require('../index');\n\n\nchai.use(chaiHttp);\n\n//Our parent block\ndescribe('API', () => {\n    let heading = \"I have separated my interesting bussiness logic in pure javascript code but I can't find a way to test the routes that require a token in the headers of the http request.\"\n    before(async () => {  \n        await Article.deleteMany({heading:heading})\n        await Query.deleteMany({username:'Cook Indomie'})\n      })\n          beforeEach((done) => { //Before each test we empty the database\n        User.deleteMany({email:'Ronaldomessi@gmail.com'},(err)=>{\n         //  console.log(config.get(\"DBHost\"))\n            done();\n        });\n    });\n\n    afterEach((done)=>{\n       // console.log(token);\n        done();\n    })\n \n    describe(\"Login And Register\",()=>{\n\n        it('should Register user, login user, generate a token upon login', function(done) {\n            chai.request(server)\n\n                // register request\n                .post('/signup')\n                // send user registration details\n                .send({\n                        'email': 'Ronaldomessi@gmail.com',\n                        'password': 'Testertester',\n                    }\n                ) \n                .end((err, res) => { // when we get a response from the endpoint\n                     //console.log(res.body)\n                    // the res object should have a status of 201\n                    res.should.have.status(201);\n\n                    // follow up with login\n                    chai.request(server)\n                        .post('/login')\n                        // send user login details\n                        .send({\n                            'email': 'Ronaldomessi@gmail.com',\n                            'password': 'Testertester'\n                        })\n                        .end((err, res) => {\n                             res.should.have.status(200);\n                             res.body.should.have.property('token');\n                             token = res.body.token;\n                            done();\n                        })\n                })\n        })\n\n        it('should not accept short password', function(done) {\n            chai.request(server)\n                // register request\n                .post('/signup')\n                // send user registration details\n                .send({\n                    'email': 'Ronaldomessi@gmail.com',\n                    'password': 'tet',\n                    }\n                ) \n                .end((err, res) => { // when we get a resonse from the endpoint\n                    res.should.have.status(400);\n                    done()\n                })\n        })\n\n        it(\"Should not allow invalid credentials\",function (done) {\n            chai.request(server)\n            .post('/login')\n            // send user login details\n            .send({\n                'username': 'Ronalsdfdo Chris',\n                'password': 'sdfjlsdf'\n            })\n            .end((err, res) => {\n                 res.should.have.status(400);\n                 res.body.should.have.property('Message');\n                done();\n            })\n        })\n   })\n\n   describe(\"Article\",()=>{\n\n    describe(\"/POST articles\",() =>{\n        it(' should POST an article ', (done) => {\n            let query ={\n                \"heading\": \"I have separated my interesting bussiness logic in pure javascript code but I can't find a way to test the routes that require a token in the headers of the http request.\",\n                \"content\":\"I have separated my interesting bussiness logic in pure javascript code but I can't find a way to test the routes that require a token in the headers of the http request.\",\n                \"image\":\"This is a message from a good friend of yours\" \n            }\n    \n          chai.request(server)\n              .post('/article')\n              .send(query)\n              .set('Authorization', 'JWT ' + token) //token is actual token data\n              .end((err, res) => {\n                    res.should.have.status(201);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property('Message').eql('New Article Created');\n                done();\n              });\n        });\n     })\n\n\n        describe(\"/GET articles\",()=>{\n            it(' should get all articles ', (done) => {\n\n                chai.request(server)\n                    .get('/article')\n                    .set('Authorization', 'JWT ' + token) //token is actual token data\n                    .end(function(err, res) {\n                        articleId = res.body[0][\"_id\"];\n                        res.should.have.status(200);\n                        res.body.should.be.a('array');\n                        res.body[0].should.have.property('_id');\n                        res.body.length.should.not.be.eql(0);\n                        done();\n                    });\n            })\n\n            it(' should get a particular article article', (done) => {\n                chai.request(server)\n                    .get('/article/' + articleId)\n                    .set('Authorization', 'JWT ' + token) //token is actual token data\n                    .end(function(err, res) {\n                        res.should.have.status(200);\n                        done();\n                    });\n            })\n        })\n\n   })\n\n   describe(\"Query\",()=>{\n\n    describe(\"/POST query\",() =>{\n        it(' should POST a query ', (done) => {\n            let query ={\n                \"username\": \"Cook Indomie\",\n                \"email\": \"cook@gmail.com\",\n                \"subject\":\"This is a subject\",\n                \"message\":\"This is a message from a good friend of yours\"\n            }\n    \n          chai.request(server)\n              .post('/query')\n              .send(query)\n              .set('Authorization', 'JWT ' + token) //token is actual token data\n              .end((err, res) => {\n                    res.should.have.status(201);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property('Message').eql('New Query submitted successfully');\n                done();\n              });\n        });\n     })\n\n    describe(\"/GET queries\",()=>{\n        it(' should get queries ', (done) => {\n\n            chai.request(server)\n                .get('/query')\n                .set('Authorization', 'JWT ' + token) \n                .end(function(err, res) {\n                    res.should.have.status(200);\n                    res.body.should.be.a('array');\n                    res.body[0].should.have.property('name');\n                    res.body[0].should.have.property('email');\n                    res.body[0].should.have.property('subject');\n                    res.body[0].should.have.property('message');\n                    done();\n                });\n        })\n    })\n\n   })\n\n   describe(\"Likes\",()=>{\n       let likeId;\n  \n        describe(\"/POST like\",() =>{\n            it(' should POST a like ', (done) => {\n                let like ={\n                    \"articleId\": articleId\n                }\n        \n              chai.request(server)\n                  .post('/like')\n                  .send(like)\n                  .set('Authorization', 'JWT ' + token) //token is actual token data\n                  .end((err, res) => {\n                    res.body.should.have.property('Message');\n                    done();\n                  });\n            });\n         })\n         \n         describe('/GET Like', () => {\n            it(' should GET all the likes', (done) => {\n            chai.request(server)\n                .get('/like')\n                .end((err, res) => {\n                        res.should.have.status(200);\n                        res.body.should.be.a('array');\n                        res.body.length.should.not.be.eql(0);\n                        likeId = res.body[0][\"_id\"];\n                    done();\n                });\n            });\n        });\n         describe('/GET like/:id', () => {\n\n            it(' should GET a particular like', (done) => {\n              chai.request(server)\n                  .get('/like/' + likeId)\n                  .end((err, res) => {\n                        res.should.have.status(200);\n                        res.body.should.be.a('object');\n                    done();\n                  });\n            });\n        });\n\n  })\n  describe(\"Comment\",()=>{\nlet commentId;\n  describe('/GET comment', () => {\n      it(' should GET all the comments', (done) => {\n        chai.request(server)\n            .get('/comment')\n            .end((err, res) => {\n                  res.should.have.status(200);\n                  res.body.should.be.a('array');\n                  res.body.length.should.not.be.eql(0);\n                  commentId = res.body[0][\"_id\"];\n              done();\n            });\n      });\n  });\n\n\n  describe(\"/POST comment\",() =>{\n    it(' should POST a comment ', (done) => {\n        let comment ={\n            \"articleId\": articleId,\n            \"comment\" : \"This is a test added during testing\"\n        }\n\n      chai.request(server)\n          .post('/comment')\n          .send(comment)\n          .set('Authorization', 'JWT ' + token) //token is actual token data\n          .end((err, res) => {\n                res.should.have.status(201);\n            done();\n          });\n    });\n })\n\n describe('/GET comment/:id', () => {\n\n    it(' should GET a particular comment', (done) => {\n      chai.request(server)\n          .get('/comment/' + commentId)\n          .set('Authorization', 'JWT ' + token) //token is actual token data\n          .end((err, res) => {\n                res.should.have.status(200);\n                res.body.should.be.a('object');\n            done();\n          });\n    });\n});\n\n\n  })\n\n});\n\n// describe(\"The first test\",() =>{\n//   it(\"Should Pass\",() =>{\n//       expect(true).to.equal(false);\n//   })\n\n// })\n"],"file":"index.test.js"}