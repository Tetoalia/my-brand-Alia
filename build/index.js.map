{"version":3,"sources":["../src/index.js"],"names":["express","require","router","Router","mongoose","cors","swaggerJSDoc","swaggerUi","api","articleRoutes","queryRouter","likeRouter","commentRouter","loginRouter","signupRouter","PORT","process","env","config","req","swaggerDefinition","openapi","info","title","version","description","license","name","url","contact","servers","security","bearerAuth","components","securitySchemes","type","scheme","bearerFormat","options","apis","swaggerSpec","app","connectDB","connect","DBHost","useNewUrlParser","useUnifiedTopology","then","use","origin","json","serve","setup","set","listen","util","getEnv","console","log","error","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst swaggerJSDoc = require(\"swagger-jsdoc\");\nconst swaggerUi = require(\"swagger-ui-express\");\n\nconst api = require(\"./routes/api\");\nconst articleRoutes = require(\"./routes/article\");\nconst queryRouter = require(\"./routes/query\");\nconst likeRouter = require(\"./routes/like\");\nconst commentRouter = require(\"./routes/comment\");\n\nconst loginRouter = require(\"./routes/login\");\nconst signupRouter = require(\"./routes/sign-up\");\n\nconst PORT = process.env.PORT || 5000;\nconst config = require(\"config\");\nconst req = require(\"express/lib/request\");\n\nconst swaggerDefinition = {\n  openapi: \"3.0.0\",\n  info: {\n    title: \"Express API for My portfolio\",\n    version: \"1.0.0\",\n  },\n  description:\n    \"This is a REST API application made with Express. It retrieves data from Mongodb using mongoose.\",\n  license: {\n    name: \"Licensed Under MIT\",\n    url: \"https://spdx.org/licenses/MIT.html\",\n  },\n  contact: {\n    name: \"TETO Alia\",\n    url: \"https://www.tetoalia.codes\",\n  },\n  servers: [\n    {\n      url: \"https://my-brand-teto-heroku.herokuapp.com/\",\n    },\n    {\n      url: \"http://localhost:5000/\",\n    },\n  ],\n  security: [\n    {\n      bearerAuth: [],\n    },\n  ],\n  components: {\n    securitySchemes: {\n      bearerAuth: {\n        type: \"http\",\n        scheme: \"bearer\",\n        bearerFormat: \"JWT\",\n        name: \"bearerAuth\",\n        in: \"header\",\n      },\n    },\n  },\n};\n\nconst options = {\n  swaggerDefinition,\n  // Paths to files containing OpenAPI definitions\n  apis: [\"src/routes/*.js\"],\n};\n\nconst swaggerSpec = swaggerJSDoc(options);\n\nconst app = express();\n\nconst connectDB = async () => {\n  await mongoose\n    .connect(config.DBHost, { useNewUrlParser: true, useUnifiedTopology: true })\n    .then(() => {\n      //middlewares\n      app.use(\n        cors({\n          origin: \"*\",\n        })\n      );\n\n      app.use(express.json());\n\n      //middlewares for routes\n      app.use(\"/docs\", swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n      app.use(\"/\", api);\n      app.use(\"/article\", articleRoutes);\n      app.use(\"/query\", queryRouter);\n      app.use(\"/like\", likeRouter);\n      app.use(\"/comment\", commentRouter);\n\n      app.use(\"/login\", loginRouter);\n      app.use(\"/signup\", signupRouter);\n\n      app.set(\"port\", PORT);\n\n      app.listen(PORT, () => {\n        if (config.util.getEnv(\"NODE_ENV\") != \"test\") {\n          console.log(\"server started\");\n        }\n      });\n    })\n    .catch(function (error) {\n      console.log(`Unable to connect to the Mongo db  ${error} `);\n    });\n};\n\n// use as a function\nconnectDB();\nmodule.exports = app;\n"],"file":"index.js"}