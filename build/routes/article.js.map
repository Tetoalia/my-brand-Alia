{"version":3,"sources":["../../src/routes/article.js"],"names":["express","require","validateArticle","Article","router","Router","validateMiddleWare","get","req","res","find","articles","status","send","error","findOne","_id","params","id","article","post","verifyToken","heading","body","content","userId","user","image","newArticle","save","Message","articleUser","deleteOne","put","module","exports"],"mappings":";;AAKA;;AACA;;;;;;;;AANA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,eAAoCA,OAAO,CAAC,mBAAD,CAA3C;AAAA,IAAOC,eAAP,YAAOA,eAAP;AAAA,IAAwBC,OAAxB,YAAwBA,OAAxB;;AACA,IAAMC,MAAM,GAAGJ,OAAO,CAACK,MAAR,EAAf;;AACA,IAAMC,kBAAkB,GAAGL,OAAO,CAAC,mCAAD,CAAlC;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAG,MAAM,CAACG,GAAP,CAAW,GAAX;AAAA,qEAAiB,iBAAMC,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEcN,OAAO,CAACO,IAAR,CAAa,EAAb,CAFd;;AAAA;AAEHC,YAAAA,QAFG;AAGTF,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,QAArB;AAHS;AAAA;;AAAA;AAAA;AAAA;AAKTF,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,cAAAA,KAAK,EAAC;AAAP,aAArB;;AALS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,MAAM,CAACG,GAAP,CAAW,MAAX;AAAA,sEAAmB,kBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEWN,OAAO,CAACY,OAAR,CAAgB;AAAEC,cAAAA,GAAG,EAAER,GAAG,CAACS,MAAJ,CAAWC;AAAlB,aAAhB,CAFX;;AAAA;AAELC,YAAAA,OAFK;;AAGX,gBAAIA,OAAJ,EAAa;AACTV,cAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,OAArB;AACH,aAFD,MAEK;AACDV,cAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,gBAAAA,KAAK,EAAE;AAAR,eAArB;AACH;;AAPU;AAAA;;AAAA;AAAA;AAAA;AASXL,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,cAAAA,KAAK,EAAE;AAAR,aAArB,EATW,CAUX;;AAVW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,MAAM,CAACgB,IAAP,CAAY,GAAZ,EAAgBC,wBAAhB,EAA6B,oCAAmBnB,eAAnB,CAA7B;AAAA,sEAAkE,kBAAOM,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAItC,IAAIN,OAAJ,CAAY;AAChCmB,cAAAA,OAAO,EAAGd,GAAG,CAACe,IAAJ,CAASD,OADa;AAEhCE,cAAAA,OAAO,EAAGhB,GAAG,CAACe,IAAJ,CAASC,OAFa;AAGhCC,cAAAA,MAAM,EAAEjB,GAAG,CAACkB,IAAJ,CAAS,IAAT,CAHwB;AAIhCC,cAAAA,KAAK,EAAGnB,GAAG,CAACe,IAAJ,CAASI;AAJe,aAAZ,CAJsC;;AAAA;AAIxDC,YAAAA,UAJwD;AAAA;AAAA,mBAWvDA,UAAU,CAACC,IAAX,EAXuD;;AAAA;AAa7DpB,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACiB,cAAAA,OAAO,EAAC;AAAT,aAArB;AAb6D;AAAA;;AAAA;AAAA;AAAA;AAe3DrB,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,cAAAA,KAAK,EAAC;AAAP,aAArB,EAf2D,CAgB9D;;AAhB8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlE;;AAAA;AAAA;AAAA;AAAA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,MAAM,UAAN,CAAc,MAAd,EAAsBiB,wBAAtB;AAAA,sEAAmC,kBAAOb,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEPN,OAAO,CAACY,OAAR,CAAgB;AAACC,cAAAA,GAAG,EAAER,GAAG,CAACS,MAAJ,CAAWC;AAAjB,aAAhB,CAFO;;AAAA;AAE3Ba,YAAAA,WAF2B;;AAAA,kBAGvBvB,GAAG,CAACkB,IAAJ,CAAS,IAAT,KAAkBK,WAAW,CAAC,QAAD,CAHN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIjB5B,OAAO,CAAC6B,SAAR,CAAkB;AAAEhB,cAAAA,GAAG,EAAER,GAAG,CAACS,MAAJ,CAAWC;AAAlB,aAAlB,CAJiB;;AAAA;AAKvBT,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACiB,cAAAA,OAAO,EAAC;AAAT,aAArB;AALuB;AAAA;;AAAA;AAOvBrB,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACiB,cAAAA,OAAO,EAAC;AAAT,aAArB;;AAPuB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUjCrB,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAArB;;AAViC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;AAcAV,MAAM,CAAC6B,GAAP,CAAW,MAAX,EAAkBZ,wBAAlB;AAAA,sEAA+B,kBAAOb,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAECN,OAAO,CAACY,OAAR,CAAgB;AAACC,cAAAA,GAAG,EAAER,GAAG,CAACS,MAAJ,CAAWC;AAAjB,aAAhB,CAFD;;AAAA;AAEnBa,YAAAA,WAFmB;;AAAA,kBAGnBvB,GAAG,CAACkB,IAAJ,CAAS,IAAT,KAAkBK,WAAW,CAAC,QAAD,CAHV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIH5B,OAAO,CAACY,OAAR,CAAgB;AAAEC,cAAAA,GAAG,EAAER,GAAG,CAACS,MAAJ,CAAWC;AAAlB,aAAhB,CAJG;;AAAA;AAInBC,YAAAA,OAJmB;;AAMnB,gBAAIX,GAAG,CAACe,IAAJ,CAASD,OAAb,EAAsB;AAClBH,cAAAA,OAAO,CAACG,OAAR,GAAkBd,GAAG,CAACe,IAAJ,CAASD,OAA3B;AACH;;AAED,gBAAId,GAAG,CAACe,IAAJ,CAASC,OAAb,EAAsB;AAClBL,cAAAA,OAAO,CAACK,OAAR,GAAkBhB,GAAG,CAACe,IAAJ,CAASC,OAA3B;AACH;;AACD,gBAAIhB,GAAG,CAACe,IAAJ,CAASI,KAAb,EAAoB;AAChBR,cAAAA,OAAO,CAACQ,KAAR,GAAgBnB,GAAG,CAACe,IAAJ,CAASI,KAAzB;AACH;;AAfkB;AAAA,mBAgBbR,OAAO,CAACU,IAAR,EAhBa;;AAAA;AAiBnBpB,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,OAArB;AAjBmB;AAAA;;AAAA;AAmBnBV,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACiB,cAAAA,OAAO,EAAC;AAAT,aAArB;;AAnBmB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsB7BrB,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAArB,EAtB6B,CAuBxB;;AAvBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;AA4BAoB,MAAM,CAACC,OAAP,GAAiB/B,MAAjB","sourcesContent":["const express = require(\"express\");\nconst {validateArticle, Article } = require(\"../models/Article\");\nconst router = express.Router();\nconst validateMiddleWare = require('../middlewares/validateMiddleware')\n\nimport { verifyToken } from \"../controllers/verifyToken\";\nimport validateMiddleware from \"../middlewares/validateMiddleware\";\n\n/**\n * @swagger\n * security:\n *   bearerAuth: []\n * /article:\n *   get:\n *     summary: GET Articles\n *     tags:\n *       - Article\n *     responses:\n *       '400':\n *         description: Bad Request \n *       '200':\n *         description: A list of queries.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Article' \n * components:\n *   schemas:\n *     Article:\n *       type: object\n *       properties:\n *         heading:\n *           type: string\n *           description: heading of the article\n *           example: Manchester United boss Ralf Rangnick believes club getting better\n *         content: \n *           type: string\n *           description: Detailed contents of the article\n *           example: The Old Trafford defeat by Chris Wilder's Championship side ended any realistic hope of United winning their first domestic silverware since 2017.\n *         image:\n *           type: string\n *           description: The image in the article.\n *           example: smilingcat.png\n */\n\n\nrouter.get(\"/\",  async(req,res)=>{\n    try {\n        const articles = await Article.find({});\n        res.status(200).send(articles);\n    } catch (error){\n        res.status(404).send({error:\"Problem getting articles\"})\n    }\n})\n\n/**\n * @swagger\n * \"/article/{articleId}\":\n *   get:\n *     summary: Find article by ID\n *     tags: \n *       - Article\n *     parameters:\n *       - name: articleId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the article\n *     responses:\n *       \"200\":\n *         description: successful operation\n *         content:\n *           application/json:\n *             schema:\n *               $ref: \"#/components/schemas/Article\"\n *       \"404\":\n *         description: Article not found\n */\n\nrouter.get(\"/:id\", async (req,res) =>{\n    try {\n        const article = await Article.findOne({ _id: req.params.id})\n        if (article) {\n            res.status(200).send(article)   \n        }else{\n            res.status(404).send({error: \"Article doesn't exist !\"})\n        }\n    } catch (err) {\n        res.status(404).send({error: \"Article doesn't exist !\"})\n        // console.log(err)\n    }\n\n})\n\n\n/** \n* @swagger\n* /article:\n*   post:\n*     summary: Add New Article\n*     tags:\n*       - Article\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*             schema:\n*               $ref: '#/components/schemas/Article' \n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Query added.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n*/\n\nrouter.post(\"/\",verifyToken, validateMiddleware(validateArticle), async (req,res) =>{\n   // console.log(req.body)\n   try {\n\n    const newArticle =await new Article({\n        heading : req.body.heading,\n        content : req.body.content,\n        userId: req.user[\"id\"],\n        image : req.body.image,\n        })\n       // console.log(req.user[\"id\"])\n     await newArticle.save();\n\n     res.status(201).send({Message:\"New Article Created\"})     \n   } catch (error){\n       res.status(400).send({error:\"There was a problem publishing the article\"})\n    //    console.log(error)\n   }\n})\n\n\n/**\n * @swagger\n * \"/article/{articleId}\":\n *   delete:\n *     summary: Delete article according to ID\n *     tags: \n *       - Article\n *     parameters:\n *       - name: articleId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the article\n *     responses:\n *       \"200\":\n *         description: successful operation\n *         content:\n *           application/json:\n *             schema:\n *               $ref: \"#/components/schemas/Article\"\n *       \"404\":\n *         description: Article not found\n */\n\nrouter.delete(\"/:id\", verifyToken, async (req, res) => {\n\ttry {\n    let articleUser = await Article.findOne({_id: req.params.id})\n        if (req.user[\"id\"] == articleUser[\"userId\"]) {\n            await Article.deleteOne({ _id: req.params.id })\n            res.status(202).send({Message:\"Article deleted successfully\"});      \n        } else {\n            res.status(401).send({Message:\"Not Authorized to perform this operation\"})\n        }\n\t} catch {\n\t\tres.status(404).send({ error: \"This article doesn't exist!\" })\n\t}\n})\n\nrouter.put(\"/:id\",verifyToken, async (req, res) => {\n\ttry {\n        let articleUser = await Article.findOne({_id: req.params.id})\n        if (req.user[\"id\"] == articleUser[\"userId\"]) {\n\t\t    const article = await Article.findOne({ _id: req.params.id })\n\n            if (req.body.heading) {\n                article.heading = req.body.heading\n            }\n\n            if (req.body.content) {\n                article.content = req.body.content\n            }\n            if (req.body.image) {\n                article.image = req.body.image\n            }\n            await article.save()\n            res.status(200).send(article)\n        }else{\n            res.status(401).send({Message:\"Not Authorized to perform this operation\"})  \n        }\n\t} catch(err) {\n\t\tres.status(404).send({ error: \"We couldn't find that article \" })\n       // console.log(err);\n\t}\n})\n\n\nmodule.exports = router;\n"],"file":"article.js"}