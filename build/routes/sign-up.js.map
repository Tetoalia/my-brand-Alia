{"version":3,"sources":["../../src/routes/sign-up.js"],"names":["express","require","router","Router","bcrypt","validateUser","User","validateMiddleWare","get","req","res","send","Message","post","findOne","email","body","userExist","status","genSalt","salt","hash","password","hashedPassword","user","type","save","module","exports"],"mappings":";;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,eAA4BA,OAAO,CAAC,gBAAD,CAAnC;AAAA,IAAOI,YAAP,YAAOA,YAAP;AAAA,IAAoBC,IAApB,YAAoBA,IAApB;;AACA,IAAMC,kBAAkB,GAAGN,OAAO,CAAC,mCAAD,CAAlC;;AAEAC,MAAM,CAACM,GAAP,CAAW,GAAX,EAAe,UAACC,GAAD,EAAKC,GAAL,EAAW;AACtBA,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAACC,IAAAA,OAAO,EAAC;AAAT,GAAT;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,MAAM,CAACW,IAAP,CAAY,GAAZ,EAAiBN,kBAAkB,CAACF,YAAD,CAAnC;AAAA,qEAAmD,iBAAMI,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGvBJ,IAAI,CAACQ,OAAL,CAAa;AAACC,cAAAA,KAAK,EAAEN,GAAG,CAACO,IAAJ,CAASD;AAAjB,aAAb,CAHuB;;AAAA;AAGzCE,YAAAA,SAHyC;;AAAA,iBAK3CA,SAL2C;AAAA;AAAA;AAAA;;AAAA,6CAKzBP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,qBAArB,CALyB;;AAAA;AAAA;AAAA,mBAM5BP,MAAM,CAACe,OAAP,EAN4B;;AAAA;AAMzCC,YAAAA,IANyC;AAAA;AAAA,mBAOlBhB,MAAM,CAACiB,IAAP,CAAYZ,GAAG,CAACO,IAAJ,CAASM,QAArB,EAA+BF,IAA/B,CAPkB;;AAAA;AAOzCG,YAAAA,cAPyC;AASzCC,YAAAA,IATyC,GASnC,IAAIlB,IAAJ,CAAS;AACjBS,cAAAA,KAAK,EAACN,GAAG,CAACO,IAAJ,CAASD,KADE;AAEjBO,cAAAA,QAAQ,EAACC,cAFQ;AAGjBE,cAAAA,IAAI,EAAE;AAHW,aAAT,CATmC;AAAA;AAAA,mBAexCD,IAAI,CAACE,IAAL,EAfwC;;AAAA;AAgB/ChB,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAC;AAAT,aAArB;AAhB+C;AAAA;;AAAA;AAAA;AAAA;AAkB/C;AACAF,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,+BAArB;;AAnB+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnD;;AAAA;AAAA;AAAA;AAAA;AAwBAgB,MAAM,CAACC,OAAP,GAAiB1B,MAAjB","sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst bcrypt = require(\"bcrypt\")\n\nconst {validateUser,User} = require(\"../models/User\")\nconst validateMiddleWare = require('../middlewares/validateMiddleware')\n\nrouter.get(\"/\",(req,res)=>{\n    res.send({Message:\"This is the sign up page\"})\n})\n\n/**\n * @swagger\n * /signup:\n *   post:\n *     summary: Register new user\n *     tags:\n *       - Auth\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 username:\n *                   type: string\n *                 password:\n *                   type: string  \n *     responses:\n *       '400':\n *         description: Bad Request \n *       '200':\n *         description: A list of queries.\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 token:\n *                   type: string\n *                   description: A secure token for authentication\n *                 \n */\n\nrouter.post(\"/\", validateMiddleWare(validateUser), async(req,res)=>{\ntry {    \n\n    const userExist = await User.findOne({email: req.body.email})\n    \n    if (userExist) return res.status(400).send(\"email Already Taken\")\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(req.body.password, salt)\n\n    const user= new User({\n        email:req.body.email,\n        password:hashedPassword,\n        type: \"user\"\n    })\n\n     await user.save();\n    res.status(201).send({Message:\"User registered Successfully\"})\n} catch (error) {\n    // console.log(error)\n    res.status(500).send(\"Problem registering new users\");\n}\n\n})\n\nmodule.exports = router;"],"file":"sign-up.js"}