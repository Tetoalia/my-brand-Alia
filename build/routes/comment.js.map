{"version":3,"sources":["../../src/routes/comment.js"],"names":["express","require","validateComment","Comment","Article","router","Router","validateMiddleWare","get","req","res","find","comments","status","send","Message","console","error","sendStatus","articleId","params","id","User","findOne","_id","user","log","email","post","verifyToken","newComment","body","comment","userId","save","deleteOne","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst {validateComment,Comment } = require(\"../models/Comment\");\nconst {Article } = require(\"../models/Article\");\n\nconst router = express.Router();\nconst validateMiddleWare = require('../middlewares/validateMiddleware')\n\nimport { verifyToken } from \"../controllers/verifyToken\";\nimport { User } from \"../models/User\";\n\n/**\n * @swagger\n * security:\n *   bearerAuth: []\n * /comment:\n *   get:\n *     summary: GET Comments\n *     tags:\n *       - Comment\n *     responses:\n *       '400':\n *         description: Bad Request \n *       '401':\n *         description: Unauthorized\n *       '200':\n *         description: A list of comments on articles.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 type: object\n *                 properties:\n *                   name:\n *                     articleId: string\n *                     description: The Id of the article with comment.\n *                   userId:\n *                     type: string\n *                     description: The Id of the user who commented\n *                   comment:\n *                     type: string\n *                     description: comment contents\n */\n\nrouter.get(\"/\",  async(req,res)=>{\n    try {\n        const comments = await Comment.find({});\n        res.status(200).send(comments);\n    } catch (error){\n        // console.log(error)\n        res.status(500).send({Message: \"Problem getting comments\"});\n    }\n\n})\n\n\nrouter.get(\"/:id\", async (req,res) =>{\n    try {\n        const comments = await Comment.find({})\n    \n        res.send({comments: comments})   \n    } catch(error)  {\n        console.error(error);\n        res.sendStatus(404).send(\"Comment not found\");\n    }\n})\n\nrouter.get(\"/article/:id\", async (req,res) =>{\n    try {\n        const comments = await Comment.find({articleId:req.params.id})\n        if (comments) {\n            res.send(comments)   \n        }else{\n            res.status(404).send(\"No comment for this article\")\n        }\n    } catch(error)  {\n       // console.error(error);\n        res.sendStatus(404).send(\"No comments for this article\");\n    }\n})\n\nrouter.get(\"/user/:id\", async (req,res) =>{\n    try {\n        const user = await User.findOne({_id:req.params.id})\n        if (user) {\n            console.log(user)\n            res.send({\"email\": user.email})   \n        }else{\n            res.status(206).send(\"User not found\")\n        }\n    } catch(error)  {\n       // console.error(error);\n        res.sendStatus(206).send(\"User not found\");\n    }\n})\n\n/** \n* @swagger\n* /comment:\n*   post:\n*     summary: Add New Comment\n*     tags:\n*       - Comment\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*             schema:\n*               $ref: '#/components/schemas/Comment' \n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Comment added.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n* components:\n*   schemas:\n*     Comment:\n*       type: object\n*       properties:\n*         articleId:\n*           type: string\n*           description: Article Id to add the comment to\n*           example: 9ad6beae833c2ea873\n*         comment:\n*           type: string\n*           description: comment.\n*           example: This swagger docs is great\n*/\n\nrouter.post(\"/\",verifyToken,validateMiddleWare(validateComment) , async (req,res) =>{\n   try {\n\n    const newComment = new Comment({\n        articleId : req.body.articleId,\n        comment:req.body.comment,\n        userId : req.user[\"id\"]\n        })\n\n        await newComment.save();\n    res.status(201).send({Message:\"Comment added successfully\"})     \n   } catch (error){\n       res.status(500).send({Message:\"problem adding comment\"});\n    //  console.log(error)\n    //  console.log(req.user[\"user\"][\"_id\"])\n   }\n})\n\n\nrouter.delete(\"/:id\", verifyToken,validateMiddleWare(validateComment), async (req, res) => {\n\ttry {\n\t\tawait Comment.deleteOne({ articleId: req.params.id , userId:req.user[\"user\"][\"_id\"]})\n\t\tres.sendStatus(204).send({Message: \"Comment Deleted successfully\"});\n\t} catch {\n\t\tres.status(500).send({ error: \"Problem deleting a comment\" })\n\t}\n})\n\nmodule.exports = router;\n"],"file":"comment.js"}