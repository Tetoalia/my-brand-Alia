{"version":3,"sources":["../../src/routes/query.js"],"names":["express","require","Query","validateQuery","router","Router","validateMiddleware","get","verifyToken","req","res","find","queries","user","status","send","Message","post","newQuery","name","body","username","email","message","subject","save","console","log","error","module","exports"],"mappings":";;AAMA;;;;;;AANA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,eAA+BA,OAAO,CAAC,iBAAD,CAAtC;AAAA,IAAOC,KAAP,YAAOA,KAAP;AAAA,IAAcC,aAAd,YAAcA,aAAd;;AACA,IAAMC,MAAM,GAAGJ,OAAO,CAACK,MAAR,EAAf;;AAEA,IAAMC,kBAAkB,GAAGL,OAAO,CAAC,mCAAD,CAAlC;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAG,MAAM,CAACG,GAAP,CAAW,GAAX,EAAgBC,wBAAhB;AAAA,qEAA6B,iBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEFR,KAAK,CAACS,IAAN,EAFE;;AAAA;AAEnBC,YAAAA,OAFmB;AAGnBC,YAAAA,IAHmB,GAGZJ,GAAG,CAACI,IAHQ;AAIpBH,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,OAArB;AAJoB;AAAA;;AAAA;AAAA;AAAA;AAMrBF,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAE;AAAV,aAArB;;AANqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,MAAM,CAACa,IAAP,CAAY,GAAZ,EAAiBX,kBAAkB,CAACH,aAAD,CAAnC;AAAA,sEAAoD,kBAAOM,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1CQ,YAAAA,QAF0C,GAE/B,IAAIhB,KAAJ,CAAU;AACvBiB,cAAAA,IAAI,EAAGV,GAAG,CAACW,IAAJ,CAASC,QADO;AAEvBC,cAAAA,KAAK,EAAGb,GAAG,CAACW,IAAJ,CAASE,KAFM;AAGvBC,cAAAA,OAAO,EAAEd,GAAG,CAACW,IAAJ,CAASG,OAHK;AAIvBC,cAAAA,OAAO,EAAEf,GAAG,CAACW,IAAJ,CAASI;AAJK,aAAV,CAF+B;AAAA;AAAA,mBAS1CN,QAAQ,CAACO,IAAT,EAT0C;;AAAA;AAUhDf,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,yBAAU;AAAX,aAArB;AAVgD;AAAA;;AAAA;AAAA;AAAA;AAY7CW,YAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAG,CAACW,IAAhB;AACAV,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACa,cAAAA,KAAK,EAAC;AAAP,aAArB;;AAb6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApD;;AAAA;AAAA;AAAA;AAAA;AAiBAC,MAAM,CAACC,OAAP,GAAiB1B,MAAjB","sourcesContent":["const express = require(\"express\");\nconst {Query, validateQuery} = require(\"../models/Query\");\nconst router = express.Router();\n\nconst validateMiddleware = require(\"../middlewares/validateMiddleware\")\n\nimport { verifyToken } from \"../controllers/verifyToken\";\n\n/**\n * @swagger\n * /query:\n *   get:\n *     summary: GET Queries\n *     tags:\n *       - Query\n *     responses:\n *       '400':\n *         description: Bad Request \n *       '200':\n *         description: A list of queries.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Query' \n * tags:\n *   - name: Auth\n *     description: Routes to access the authentication\n *   - name: Article\n *     description: Access to Articles\n *   - name: Like\n *     description: Access to Likes\n *   - name: Query\n *     description: Access to Queries\n *   - name: Comment\n *     description: Access to Comments\n * components:\n *   schemas:\n *     Query:\n *       type: object\n *       properties:\n *         name:\n *           type: string\n *           description: The user's name.\n *           example: Gafuku Ramos\n *         mail:\n *           type: string\n *           description: The user's email.\n *           example: gafuku@gmail.com\n *         subject:\n *           type: string\n *           description: the query subject.\n *           example: Just want to reach out\n *         message:\n *           type: string\n *           description: The user's message in the query.\n *           example: i want to link up and talk about gafuku family\n */\n\nrouter.get(\"/\", verifyToken ,async (req,res)=>{\n    try {\n    const queries = await  Query.find();\n    const user = req.user;\n         res.status(200).send(queries);\n    } catch (error) {\n        res.status(404).send({Message: \"Problem getting articles\"})\n    }\n})\n\n/** \n* @swagger\n* /query:\n*   post:\n*     summary: Add New Query\n*     tags:\n*       - Query\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*             schema:\n*               $ref: '#/components/schemas/Query' \n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Query added.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n*/\n\nrouter.post(\"/\", validateMiddleware(validateQuery) ,async (req,res) =>{\n   try {\n    const newQuery = new Query({\n        name : req.body.username,\n        email : req.body.email,\n        message: req.body.message,\n        subject: req.body.subject,\n        })\n\n    await newQuery.save();\n    res.status(201).send({\"Message\":\"New Query submitted successfully\"})     \n   } catch (error){\n       console.log(req.body)\n       res.status(400).send({error:\"There was a problem submitting the query\"})\n   }\n})\n\nmodule.exports = router;"],"file":"query.js"}