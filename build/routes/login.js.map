{"version":3,"sources":["../../src/routes/login.js"],"names":["express","require","router","Router","jwt","User","validateUser","bcrypt","config","get","req","res","find","users","send","post","findOne","username","body","user","status","compare","password","payload","id","_id","type","sign","secret","err","token","sendStatus","accessTokenSecret","randomBytes","toString","module","exports"],"mappings":";;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,IAAMC,GAAG,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AACA,eAA4BA,OAAO,CAAC,gBAAD,CAAnC;AAAA,IAAOI,IAAP,YAAOA,IAAP;AAAA,IAAYC,YAAZ,YAAYA,YAAZ;;AACA,IAAMC,MAAM,GAAGN,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMO,MAAM,GAAGP,OAAO,CAAC,QAAD,CAAtB;;AAIAC,MAAM,CAACO,GAAP,CAAW,GAAX;AAAA,qEAAe,iBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACSN,IAAI,CAACO,IAAL,EADT;;AAAA;AACLC,YAAAA,KADK;AAGXF,YAAAA,GAAG,CAACG,IAAJ,CAASD,KAAT;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAX,MAAM,CAACa,IAAP,CAAY,GAAZ;AAAA,sEAAgB,kBAAML,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEMN,IAAI,CAACW,OAAL,CAAa;AAACC,cAAAA,QAAQ,EAAEP,GAAG,CAACQ,IAAJ,CAASD;AAApB,aAAb,CAFN;;AAAA;AAEPE,YAAAA,IAFO;;AAAA,kBAITA,IAAI,IAAI,IAJC;AAAA;AAAA;AAAA;;AAAA,8CAKFR,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,kBAArB,CALE;;AAAA;AAAA;AAAA;AAAA,mBAQDP,MAAM,CAACc,OAAP,CAAeX,GAAG,CAACQ,IAAJ,CAASI,QAAxB,EAAkCH,IAAI,CAACG,QAAvC,CARC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAULC,YAAAA,OAVK,GAUK;AAACC,cAAAA,EAAE,EAACL,IAAI,CAACM,GAAT;AAAaR,cAAAA,QAAQ,EAACE,IAAI,CAACF,QAA3B;AAAoCS,cAAAA,IAAI,EAACP,IAAI,CAACO;AAA9C,aAVL;AAWRtB,YAAAA,GAAG,CAACuB,IAAJ,CAASJ,OAAT,EAAiBf,MAAM,CAACoB,MAAxB,EAA+B,UAACC,GAAD,EAAKC,KAAL,EAAa;AACxCnB,cAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAAC,yBAASgB;AAAV,eAArB;AACH,aAFD;AAXQ;AAAA;;AAAA;AAePnB,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,oBAArB;;AAfO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBTH,YAAAA,GAAG,CAACoB,UAAJ,CAAe,GAAf;;AAlBS;AAoBRC,YAAAA,iBApBQ,GAoBY/B,OAAO,CAAC,QAAD,CAAP,CAAkBgC,WAAlB,CAA8B,EAA9B,EAAkCC,QAAlC,CAA2C,KAA3C,CApBZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;AAwBAC,MAAM,CAACC,OAAP,GAAiBlC,MAAjB","sourcesContent":["const express = require(\"express\");\r\nconst router = express.Router();\r\nconst jwt = require(\"jsonwebtoken\")\r\nconst {User,validateUser} = require(\"../models/User\")\r\nconst bcrypt = require(\"bcrypt\")\r\nconst config = require(\"config\");\r\n\r\n\r\n\r\nrouter.get(\"/\",async (req,res)=>{\r\n    const users = await User.find()\r\n\r\n    res.send(users)\r\n})\r\n\r\n/**\r\n * @swagger\r\n * /login:\r\n *   post:\r\n *     summary: Login to get token\r\n *     tags:\r\n *       - Auth\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 username:\r\n *                   type: string\r\n *                 password:\r\n *                   type: string  \r\n *     responses:\r\n *       '400':\r\n *         description: Bad Request \r\n *       '200':\r\n *         description: A list of queries.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 Message:\r\n *                   type: string\r\n *                 \r\n */\r\n\r\nrouter.post(\"/\",async(req,res)=>{\r\n    // await User.deleteMany({})\r\n   const user = await User.findOne({username: req.body.username})\r\n  \r\n   if (user == null) {\r\n       return res.status(400).send(\"Cannot Find User\")\r\n   }\r\n   try {\r\n      if(await bcrypt.compare(req.body.password, user.password)){\r\n     \r\n     const payload = {id:user._id,username:user.username,type:user.type};\r\n        jwt.sign(payload,config.secret,(err,token)=>{\r\n            res.status(200).send({\"token\": token})\r\n        })\r\n      }else{\r\n         res.status(400).send(\"Password Incorrect\");\r\n      }\r\n   } catch (err) {\r\n       res.sendStatus(405);\r\n   }\r\n  const accessTokenSecret = require(\"crypto\").randomBytes(64).toString(\"hex\");\r\n\r\n})\r\n\r\nmodule.exports = router;"],"file":"login.js"}