{"version":3,"sources":["../../src/routes/login.js"],"names":["express","require","router","Router","jwt","User","validateUser","bcrypt","config","get","req","res","status","send","Message","error","post","findOne","email","body","user","compare","password","payload","id","_id","username","type","sign","secret","err","token","console","log","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst jwt = require(\"jsonwebtoken\")\nconst {User,validateUser} = require(\"../models/User\")\nconst bcrypt = require(\"bcrypt\")\nconst config = require(\"config\");\n\n\n\nrouter.get(\"/\",async (req,res)=>{\n   // const users = await User.find()\n   try {\n    res.status.send({Message: \"This should be the login page rendered\"})       \n   } catch (error) {\n       res.status(404).send(\"Login resource not found\")\n   }\n})\n\n/**\n * @swagger\n * /login:\n *   post:\n *     summary: Login to get token\n *     tags:\n *       - Auth\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 username:\n *                   type: string\n *                 password:\n *                   type: string  \n *     responses:\n *       '400':\n *         description: Bad Request \n *       '200':\n *         description: A list of queries.\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 Message:\n *                   type: string\n *                 \n */\n\nrouter.post(\"/\",async(req,res)=>{\n   const user = await User.findOne({email: req.body.email})\n  \n   if (user == null) {\n       return res.status(400).send({\"Message\":\"Cannot Find User\"})\n   }\n   try {\n      if(await bcrypt.compare(req.body.password, user.password)){\n     \n     const payload = {id:user._id,username:user.username,type:user.type};\n        jwt.sign(payload,config.secret,(err,token)=>{\n            res.status(200).send({\"token\": token,type:user.type})\n        })\n      }else{\n         res.status(400).send(\"Password Incorrect\");\n      }\n   } catch (err) {\n       console.log(err)\n       res.status(405).send({Message: \"Problem with the server\"});\n   }\n\n})\n\nmodule.exports = router;"],"file":"login.js"}