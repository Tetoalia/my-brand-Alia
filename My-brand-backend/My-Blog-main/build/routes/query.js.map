{"version":3,"sources":["../../src/routes/query.js"],"names":["express","require","Query","validateQuery","router","Router","validateMiddleware","get","verifyToken","req","res","find","queries","user","status","send","post","newQuery","name","body","username","email","message","subject","save","console","log","error","module","exports"],"mappings":";;AAMA;;;;;;AANA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,eAA+BA,OAAO,CAAC,iBAAD,CAAtC;AAAA,IAAOC,KAAP,YAAOA,KAAP;AAAA,IAAcC,aAAd,YAAcA,aAAd;;AACA,IAAMC,MAAM,GAAGJ,OAAO,CAACK,MAAR,EAAf;;AAEA,IAAMC,kBAAkB,GAAGL,OAAO,CAAC,mCAAD,CAAlC;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAG,MAAM,CAACG,GAAP,CAAW,GAAX,EAAgBC,wBAAhB;AAAA,qEAA6B,iBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFR,KAAK,CAACS,IAAN,EADE;;AAAA;AACnBC,YAAAA,OADmB;AAEnBC,YAAAA,IAFmB,GAEZJ,GAAG,CAACI,IAFQ,EAGzB;;AACMH,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,OAArB,EAJmB,CAKzB;AACA;AACA;AACA;;AARyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;AAYAR,MAAM,CAACY,IAAP,CAAY,GAAZ,EAAiBV,kBAAkB,CAACH,aAAD,CAAnC;AAAA,sEAAoD,kBAAOM,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1CO,YAAAA,QAF0C,GAE/B,IAAIf,KAAJ,CAAU;AACvBgB,cAAAA,IAAI,EAAGT,GAAG,CAACU,IAAJ,CAASC,QADO;AAEvBC,cAAAA,KAAK,EAAGZ,GAAG,CAACU,IAAJ,CAASE,KAFM;AAGvBC,cAAAA,OAAO,EAAEb,GAAG,CAACU,IAAJ,CAASG,OAHK;AAIvBC,cAAAA,OAAO,EAAEd,GAAG,CAACU,IAAJ,CAASI;AAJK,aAAV,CAF+B;AAAA;AAAA,mBAS1CN,QAAQ,CAACO,IAAT,EAT0C;;AAAA;AAUhDd,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,yBAAU;AAAX,aAArB;AAVgD;AAAA;;AAAA;AAAA;AAAA;AAY7CU,YAAAA,OAAO,CAACC,GAAR,CAAYjB,GAAG,CAACU,IAAhB;AACAT,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,cAAAA,KAAK,EAAC;AAAP,aAArB;;AAb6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApD;;AAAA;AAAA;AAAA;AAAA;AAiBAC,MAAM,CAACC,OAAP,GAAiBzB,MAAjB","sourcesContent":["const express = require(\"express\");\r\nconst {Query, validateQuery} = require(\"../models/Query\");\r\nconst router = express.Router();\r\n\r\nconst validateMiddleware = require(\"../middlewares/validateMiddleware\")\r\n\r\nimport { verifyToken } from \"../controllers/verifyToken\";\r\n\r\n/**\r\n * @swagger\r\n * security:\r\n *   bearerAuth: []\r\n * /query:\r\n *   get:\r\n *     summary: GET Queries\r\n *     responses:\r\n *       '400':\r\n *         description: Bad Request \r\n *       '200':\r\n *         description: A list of queries.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: array\r\n *               items:\r\n *                 type: object\r\n *                 properties:\r\n *                   name:\r\n *                     type: string\r\n *                     description: The user's name.\r\n *                     example: Gafuku Ramos\r\n *                   email:\r\n *                     type: string\r\n *                     description: The user's email.\r\n *                     example: gafuku@gmail.com\r\n *                   subject:\r\n *                     type: string\r\n *                     description: the query subject.\r\n *                     example: Just want to reach out\r\n *                   message:\r\n *                     type: string\r\n *                     description: The user's message in the query.\r\n *                     example: i want to link up and talk about gafuku family\r\n * components:\r\n *   securitySchemes:\r\n *     bearerAuth:           \r\n *       type: http\r\n *       scheme: bearer\r\n *       bearerFormat: JWT\r\n */\r\n\r\nrouter.get(\"/\", verifyToken ,async (req,res)=>{\r\n    const queries = await  Query.find();\r\n    const user = req.user;\r\n    //  if(user[\"user\"].type == \"user\"){\r\n          res.status(200).send(queries);\r\n    //  }\r\n    // else{\r\n    //     res.sendStatus(401);\r\n    // }\r\n})\r\n\r\n\r\nrouter.post(\"/\", validateMiddleware(validateQuery) ,async (req,res) =>{\r\n   try {\r\n    const newQuery = new Query({\r\n        name : req.body.username,\r\n        email : req.body.email,\r\n        message: req.body.message,\r\n        subject: req.body.subject,\r\n        })\r\n\r\n    await newQuery.save();\r\n    res.status(201).send({\"Message\":\"New Query submitted successfully\"})     \r\n   } catch (error){\r\n       console.log(req.body)\r\n       res.status(400).send({error:\"There was a problem submitting the query\"})\r\n   }\r\n})\r\n\r\nmodule.exports = router;"],"file":"query.js"}